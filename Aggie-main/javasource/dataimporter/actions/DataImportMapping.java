// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package dataimporter.actions;

import com.mendix.core.CoreException;
import com.mendix.integration.ActionWhenNoObjectFound;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IEntityProxy;
import com.mendix.webui.CustomJavaAction;
import dataimporter.factory.DataImporterFactory;
import dataimporter.implementation.enums.FileExtension;
import dataimporter.implementation.enums.FileType;
import dataimporter.implementation.model.ImportMappingParameters;
import dataimporter.implementation.utils.DataImporterUtils;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import dataimporter.proxies.*;
import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.NotOfficeXmlFileException;
import org.apache.poi.util.RecordFormatException;
import java.io.File;
import java.util.*;

public class DataImportMapping extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use InputVariable.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __InputVariable;
	private final system.proxies.FileDocument InputVariable;
	private final java.lang.String TemplateJSON;
	private final java.lang.Boolean StoreInVariable;
	private final java.lang.String OutputVariableName;
	private final java.lang.String MappingParameter;
	private final java.lang.String Range;
	private final java.lang.String ShouldCommit;
	private final java.lang.String ImportMappingName;
	private final java.lang.String SheetName;
	private final java.lang.String ReturnTypeParam;

	public DataImportMapping(
		IContext context,
		IMendixObject _inputVariable,
		java.lang.String _templateJSON,
		java.lang.Boolean _storeInVariable,
		java.lang.String _outputVariableName,
		java.lang.String _mappingParameter,
		java.lang.String _range,
		java.lang.String _shouldCommit,
		java.lang.String _importMappingName,
		java.lang.String _sheetName,
		java.lang.String _returnTypeParam
	)
	{
		super(context);
		this.__InputVariable = _inputVariable;
		this.InputVariable = _inputVariable == null ? null : system.proxies.FileDocument.initialize(getContext(), _inputVariable);
		this.TemplateJSON = _templateJSON;
		this.StoreInVariable = _storeInVariable;
		this.OutputVariableName = _outputVariableName;
		this.MappingParameter = _mappingParameter;
		this.Range = _range;
		this.ShouldCommit = _shouldCommit;
		this.ImportMappingName = _importMappingName;
		this.SheetName = _sheetName;
		this.ReturnTypeParam = _returnTypeParam;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		if (this.InputVariable == null || !this.InputVariable.getHasContents() || this.InputVariable.getSize() == 0) {
			DataImporterUtils.logNode.error("You must upload a file document before the data can be imported.");
			throw new CoreException("You must upload a file document before the data can be imported.");
		}
		String fileName = this.InputVariable.getName().toLowerCase(Locale.ROOT);
		if (DataImporterUtils.getFileExtension(fileName).equals(FileExtension.UNKNOWN)) {
			DataImporterUtils.logNode.error("Uploaded file type is not supported. Please upload supported file type.");
			throw new CoreException("Uploaded file type is not supported. Please upload supported file type.");
		}
		if (this.TemplateJSON == null) {
			DataImporterUtils.logNode.error("Invalid Excel/CSV Structure.");
			throw new CoreException("Invalid Excel/CSV Structure.");
		}
		if (this.SheetName == null || this.SheetName.isBlank()) {
			DataImporterUtils.logNode.error("Sheet name is null or empty.");
			throw new CoreException("Sheet name is null or empty.");
		}
		var fileType = FileType.EXCEL;

		if (DataImporterUtils.getFileExtension(fileName).equals(FileExtension.XLS) || DataImporterUtils.getFileExtension(fileName).equals(FileExtension.XLSX)) {
			fileType = FileType.EXCEL;
		}
		if (DataImporterUtils.getFileExtension(fileName).equals(FileExtension.CSV)) {
			fileType = FileType.CSV;
		}
		Template mappingTemplate = DataImporterUtils.getTemplateMendixObjectFromJSON(getContext(),this.TemplateJSON, fileType);//getExcelMendixObjectFromJSON();

		List<IMendixObject> importedList = new ArrayList<>();
		if (mappingTemplate != null) {
			Map<IEntityProxy, List<DataImporterElement>> sheetDataImporterElementMap = DataImporterFactory.getDataProcessor(DataImporterUtils.getFileExtension(fileName)).startJsonMappingImport(this.getContext(), mappingTemplate.getMendixObject());
			importedList = getMendixObjectList(DataImporterUtils.getFile(this.getContext(), this.InputVariable.getMendixObject()), fileName, sheetDataImporterElementMap);
		}
		if (importedList == null) {
			DataImporterUtils.logNode.error("There is some problem occurred while importing the file");
			throw new CoreException("There is some problem occurred while importing the file");
		}
		if (!StoreInVariable) {
			importedList.clear();
			return Collections.emptyList();
		}
		return importedList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DataImportMapping";
	}

	// BEGIN EXTRA CODE
	private List<IMendixObject> getMendixObjectList(java.io.File file, String fileName, Map<IEntityProxy, List<DataImporterElement>> sheetDataImporterElementMap) throws CoreException {
		List<IMendixObject> importedList = null;
		for (Map.Entry<IEntityProxy, List<DataImporterElement>> entry : sheetDataImporterElementMap.entrySet()) {
			importedList = parseSheetData(file, fileName, entry);
		}
		return importedList;
	}

	private List<IMendixObject> parseSheetData(File file, String fileName, Map.Entry<IEntityProxy, List<DataImporterElement>> entry) throws CoreException {
		ImportMappingParameters importMappingParameters =  getImportMappingParametersObj();
		final long importStartTime = System.nanoTime();
		final var ERROR_WHILE_IMPORTING = "Error while importing: '";
		final var MS_BECAUSE = " ms, because: ";
		List<IMendixObject> importedList = null;
		try {
			importedList = DataImporterFactory.getDataProcessor(DataImporterUtils.getFileExtension(fileName)).parseJsonMappingData(this.getContext(), file, entry.getKey(), entry.getValue(), importMappingParameters);

		} catch (NotOfficeXmlFileException | RecordFormatException | EncryptedDocumentException e) {
			DataImporterUtils.logNode.error(ERROR_WHILE_IMPORTING + fileName + "' " + ((System.nanoTime() - importStartTime) / 1000000) + MS_BECAUSE + e.getMessage());
			DataImporterUtils.handleSpecificExceptions(e);
		} catch (Exception e) {
			DataImporterUtils.logNode.error(ERROR_WHILE_IMPORTING + fileName + "' " + ((System.nanoTime() - importStartTime) / 1000000) + MS_BECAUSE + e.getMessage());
			throw new CoreException("Uploaded file could not be imported, because: " + e.getMessage(), e);
		} finally {
			DataImporterUtils.deleteTempFile(file);
		}
		return importedList;
	}

	private ImportMappingParameters getImportMappingParametersObj() {
		return new ImportMappingParameters(
				ImportMappingName,
				ActionWhenNoObjectFound.DEFAULT,
				Integer.valueOf(Range.trim()),
				com.mendix.integration.ShouldCommit.valueOf(ShouldCommit.toUpperCase(Locale.ROOT)),
				SheetName
		);
	}
	// END EXTRA CODE
}
